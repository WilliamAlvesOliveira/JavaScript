// Criamos uma constante Contador que recebe o retorno de uma IIFE (Immediately Invoked Function Expression).
// A IIFE √© uma fun√ß√£o que √© executada imediatamente ap√≥s ser declarada.
// Isso permite criar um escopo isolado, protegendo tudo que est√° dentro dela do acesso externo.
const Contador = (function(){

    // Declaramos um Symbol chamado _symbol.
    // Esse Symbol vive apenas dentro do escopo da IIFE.
    // Isso impede que qualquer c√≥digo externo acesse diretamente essa chave.
    let _symbol = Symbol()

    // Retornamos uma classe chamada Contador.
    return class Contador {
        
        // O constructor √© executado ao criar uma nova inst√¢ncia da classe.
        constructor(){
            // Criamos uma propriedade privada no objeto,
            // usando o Symbol como chave.
            // Cada inst√¢ncia da classe ter√° seu pr√≥prio contador, iniciando em 0.
            this[_symbol] = 0
        }

        // M√©todo increment ‚Äî respons√°vel por adicionar +1 ao contador.
        increment(){
            this[_symbol]++                      // Incrementa o valor privado.
            console.log(this[_symbol])           // Exibe o valor atual no console.
        }

        // Getter contador ‚Äî permite acessar o valor atual do contador de forma controlada.
        get contador(){
            return this[_symbol]                 // Retorna o valor da propriedade privada.
        }
    }

// A IIFE √© encerrada e executada imediatamente com ()
})()


// Criamos uma inst√¢ncia da classe Contador chamada c1.
const c1 = new Contador()

// Incrementamos o contador 4 vezes na inst√¢ncia c1.
c1.increment()    // Sa√≠da: 1
c1.increment()    // Sa√≠da: 2
c1.increment()    // Sa√≠da: 3
c1.increment()    // Sa√≠da: 4

// Criamos uma nova inst√¢ncia da classe Contador chamada c2.
const c2 = new Contador()

// Incrementamos o contador 1 vez na inst√¢ncia c2.
c2.increment()    // Sa√≠da: 1

// Acessamos o valor atual do contador de cada inst√¢ncia.
// Cada inst√¢ncia possui seu pr√≥prio contador, independente uma da outra.
console.log(c1.contador)    // Sa√≠da: 4
console.log(c2.contador)    // Sa√≠da: 1


/* =======================================================
üß† Aula ‚Äî Protegendo propriedades com Symbol + IIFE

üìå O que aprendemos aqui?
- Utilizamos uma IIFE para criar um escopo isolado.
- Dentro dela, declaramos um Symbol que serve como chave privada.
- A classe Contador armazena seu contador usando esse Symbol.
- Dessa forma, a propriedade do contador n√£o √© acess√≠vel de fora da classe,
  pois o Symbol est√° isolado dentro da IIFE.

üîê Como funciona a prote√ß√£o?
- O Symbol `_symbol` n√£o √© vis√≠vel fora da IIFE.
- Ningu√©m consegue acessar diretamente `objeto[_symbol]`,
  porque fora desse escopo o Symbol n√£o existe.
- Isso impede altera√ß√µes indesejadas, protegendo os dados internos do objeto.

üöÄ Vantagens:
- Simula encapsulamento (privacidade) no JavaScript.
- Garante que apenas m√©todos internos da classe podem ler ou modificar o contador.
- Cada inst√¢ncia possui seu pr√≥prio contador isolado e protegido.

üï∞Ô∏è Contexto hist√≥rico:
- Antes da chegada dos **private fields (#)** no JavaScript moderno,
  essa era uma das formas mais utilizadas para simular privacidade.

üíé Como seria com a sintaxe moderna (private field):
class Contador {
    #contador = 0

    increment() {
        this.#contador++
        console.log(this.#contador)
    }

    get contador() {
        return this.#contador
    }
}

üìö Conclus√£o:
- A abordagem com Symbol + IIFE continua v√°lida.
- Ensina muito sobre escopo, privacidade e organiza√ß√£o do c√≥digo.
- Hoje, com os campos privados (`#`), temos uma solu√ß√£o mais elegante e oficial,
  mas entender essa estrat√©gia ajuda a compreender a evolu√ß√£o da linguagem.

======================================================= */
