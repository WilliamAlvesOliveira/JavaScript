/*==========================================
    Estrutura de dados Set e WeakSet
==========================================*/

/*========
    Set
=========*/

// O Set √© uma cole√ß√£o de valores √∫nicos, ou seja, n√£o permite valores duplicados.

const meuSet = new Set()

// Adicionando valores
meuSet.add(1)
meuSet.add(2)
meuSet.add(3)
meuSet.add(3) // ‚ûù Ignorado (valor duplicado)

console.log(meuSet) // ‚ûù Set {1, 2, 3}

// Verificar se um valor existe
console.log(meuSet.has(2)) // ‚ûù true
console.log(meuSet.has(5)) // ‚ûù false

// Deletar um valor
meuSet.delete(2)
console.log(meuSet.has(2)) // ‚ûù false

// Tamanho do Set
console.log(meuSet.size) // ‚ûù 2

// Iterando sobre o Set
for (const valor of meuSet) {
    console.log('valor:', valor)
}

// Limpando o Set
// meuSet.clear()
// console.log(meuSet.size) // ‚ûù 0

/*===========================================
    Sintaxe de Set com valores pr√©-definidos
===========================================*/

const meuSet2 = new Set([10, 20, 30, 10, 20])
console.log(meuSet2) // ‚ûù Set {10, 20, 30}

/*
üß† Observa√ß√µes:
- Se houver valores duplicados no array inicial, eles s√£o automaticamente ignorados.
- Set √© muito usado quando queremos garantir que uma lista tenha apenas valores √∫nicos.
*/


/*=========================================
    ‚úÖ Diferen√ßa entre Set e WeakSet
==========================================*/

/*
‚úîÔ∏è Set
- Armazena qualquer tipo de dado (primitivos ou objetos).
- √â iter√°vel (possui .keys(), .values(), .entries(), for...of).
- As refer√™ncias s√£o fortes ‚ûù enquanto existir no Set, o valor permanece na mem√≥ria.
- Pode verificar tamanho (.size) e limpar (.clear()).
- √ötil para listas de valores √∫nicos.

‚úîÔ∏è WeakSet
- Armazena apenas OBJETOS (n√£o aceita valores primitivos como string, number, boolean...).
- N√ÉO √© iter√°vel, n√£o possui .keys(), .values(), .entries() nem .size().
- As refer√™ncias s√£o fracas ‚ûù se o objeto n√£o tiver mais refer√™ncia no c√≥digo, ele √© removido automaticamente da mem√≥ria (garbage collector).
- Usado geralmente para controle de estado ou marca√ß√£o de objetos de forma segura e leve na mem√≥ria.
*/


/*==============
    WeakSet
===============*/

// Criando alguns objetos
const obj1 = {nome: 'objeto1'}
const obj2 = {nome: 'objeto2'}
const obj3 = {nome: 'objeto3'}

// Criando o WeakSet
const meuWeakSet = new WeakSet()

// Adicionando objetos no WeakSet
meuWeakSet.add(obj1)
meuWeakSet.add(obj2)

// Verificando se um objeto est√° no WeakSet
console.log(meuWeakSet.has(obj1)) // ‚ûù true
console.log(meuWeakSet.has(obj3)) // ‚ûù false

// Deletando um objeto
meuWeakSet.delete(obj2)
console.log(meuWeakSet.has(obj2)) // ‚ûù false

/*
üß† Observa√ß√µes Importantes:
- N√£o √© poss√≠vel ver o conte√∫do interno do WeakSet.
- N√£o existe .size, .keys(), .values(), .entries() nem itera√ß√£o sobre WeakSet.
- Se fizermos: obj1 = null ‚ûù O WeakSet remove automaticamente o objeto da mem√≥ria.
- WeakSet √© muito usado quando queremos associar uma informa√ß√£o a um objeto sem impedir que ele seja coletado pelo garbage collector.
*/


/*===============================================
    ‚úÖ RESUMO DA AULA SOBRE Set() e WeakSet()
===============================================

‚úîÔ∏è Set
- Cole√ß√£o de valores √∫nicos (n√£o aceita valores repetidos).
- Aceita qualquer tipo de dado (primitivos e objetos).
- √â iter√°vel e possui m√©todos √∫teis:
    ‚ûù add(), has(), delete(), clear(), size
- As refer√™ncias s√£o fortes ‚ûù mant√©m os dados na mem√≥ria.

‚úîÔ∏è WeakSet
- Cole√ß√£o de objetos (n√£o aceita primitivos).
- N√ÉO √© iter√°vel e n√£o possui m√©todos para verificar tamanho ou percorrer.
- As refer√™ncias s√£o fracas ‚ûù se o objeto n√£o tiver mais refer√™ncia no c√≥digo, ele √© removido automaticamente da mem√≥ria.
- √ötil para controle de estado interno, marca√ß√µes e gerenciamento de objetos sem risco de vazamento de mem√≥ria.

*/


/*========================
    üèÅ Fim da Aula! üèÅ
========================*/
