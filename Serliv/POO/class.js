// ES5 - Utilizando fun√ß√£o construtora
function Animal(tipo){
    // Se o tipo for passado, define-o na inst√¢ncia
    if(tipo) this.tipo = tipo
}

// Criando inst√¢ncias com diferentes tipos
let cachorro = new Animal('mamifero')
let gato = new Animal('mamifero')
let cobra = new Animal('r√©ptil')
let peixe = new Animal() // N√£o passa tipo ‚Üí herdar√° do prototype

// M√©todo compartilhado entre todas as inst√¢ncias via prototype
Animal.prototype.obterTipo = function(){
    return this.tipo
}

// Valor padr√£o da propriedade 'tipo' via prototype
Animal.prototype.tipo = 'desconhecido'

// ------------------------------------

// ES6 - Utilizando a nova sintaxe de classe (az√∫car sint√°ctico)
class ClassAnimal{
    constructor(tipo){
        // Define a propriedade 'tipo' na inst√¢ncia se for passada
        this.tipo = tipo
    }

    // M√©todo da classe (vai para o prototype, igual ES5)
    obterTipo(){
        return this.tipo
    }
}

// Valor padr√£o para a propriedade 'tipo' (caso n√£o seja definido no construtor)
ClassAnimal.prototype.tipo = 'desconhecido'

let animal = new ClassAnimal('anfibio')

// ------------------------------------

console.log(animal)             // Inst√¢ncia da classe com tipo = 'anfibio'
console.log(gato)               // Inst√¢ncia da fun√ß√£o construtora com tipo = 'mamifero'
console.log(typeof animal)      // 'object' ‚Üí √© uma inst√¢ncia
console.log(typeof gato)        // 'object'
console.log(typeof ClassAnimal) // 'function' ‚Üí classes s√£o fun√ß√µes internamente
console.log(typeof Animal)      // 'function'
console.log(animal.obterTipo()) // 'anfibio'
console.log(gato.obterTipo())   // 'mamifero'

// Comparando os prototypes
console.log(ClassAnimal.prototype)
console.log(Animal.prototype)

let sapo = new ClassAnimal()     // N√£o define 'tipo', usar√° o valor do prototype
console.log(sapo.tipo)           // 'desconhecido'

// ------------------------------------

console.log('-------------------')

// Classe com verifica√ß√£o de tipo e tentativa de definir propriedade fora do constructor
class ClassAnimal2{
    constructor(tipo){
        if(tipo){
            this.tipo = tipo
        }
    }

    obterTipo(){
        return this.tipo
    }

    // Esta propriedade ser√° definida diretamente na inst√¢ncia (n√£o no prototype)
    testePropriedade = 'ser√° que funciona'
}

// Valor padr√£o via prototype
ClassAnimal2.prototype.tipo = 'desconhecido'

let morcego = new ClassAnimal2()
console.log(morcego.tipo)  // 'desconhecido' (pegou do prototype)

// ------------------------------------------------------
// üéØ RESUMO FINAL
//
// Neste c√≥digo mostramos duas formas de trabalhar com orienta√ß√£o a objetos em JavaScript:
//
// 1. Forma "antiga" (ES5) com fun√ß√µes construtoras e prototype:
//    - Criamos objetos com fun√ß√µes como `function Animal()`.
//    - Adicionamos m√©todos ao prototype (`Animal.prototype.obterTipo`) para reutiliza√ß√£o.
//    - Usamos `new` para instanciar e o m√©todo `call()` para heran√ßa de construtores.
//    - Precisamos ajustar o `constructor` manualmente ao sobrescrever o prototype.
//
// 2. Forma moderna (ES6) com `class`:
//    - A sintaxe √© mais limpa e parecida com outras linguagens O.O.
//    - M√©todos s√£o adicionados automaticamente ao prototype.
//    - A heran√ßa √© feita com `extends` (n√£o mostrado aqui, mas importante).
//
// Ambas as formas funcionam, mas hoje usamos `class` por clareza e facilidade.
// Mesmo com `class`, o JavaScript continua usando prototype por tr√°s dos panos.
//
// üí° Entender a forma antiga (ES5) ajuda a entender como o JS funciona de verdade!
// ------------------------------------------------------

/*========================
    ‚ö†Ô∏è ATEN√á√ÉO IMPORTANTE
==========================*/

// Quando usamos fun√ß√µes construtoras no estilo ES5, como `Animal2`,
// √© poss√≠vel que o desenvolvedor chame a fun√ß√£o sem o operador `new`, por exemplo:
// Animal2('mamifero')

// Nesse caso, `this` n√£o se refere a um novo objeto, mas sim ao objeto global (`window` no navegador),
// o que causaria a cria√ß√£o da propriedade `tipo` diretamente no escopo global ‚Äî algo perigoso e n√£o desejado.

// Podemos evitar esse comportamento de duas formas:
//
// 1. Usando `'use strict'`, o que faz o JavaScript lan√ßar um erro automaticamente
//    se tentarmos usar `this` em uma fun√ß√£o construtora sem `new`.
// 2. Validando manualmente com `this instanceof Animal2` e lan√ßando um erro personalizado,
//    como fizemos abaixo:

function Animal2(tipo) {
    if (this instanceof Animal2) {
        if (tipo) this.tipo = tipo
    } else {
        throw new Error('A fun√ß√£o Animal2 deve ser chamada com o operador "new"')
    }
}

// ‚úÖ Forma correta:
const cavalo = new Animal2('mam√≠fero')

// ‚ùå Forma incorreta (sem `new`):
// Animal2('r√©ptil') // Isso lan√ßaria um erro personalizado

// üìå OBSERVA√á√ÉO:
// Quando usamos a sintaxe moderna com `class`, esse tipo de erro j√° √© tratado automaticamente pelo JavaScript.
// Ou seja, se voc√™ tentar chamar uma classe como fun√ß√£o (sem `new`), o JS lan√ßa um erro:
ClassAnimal('mam√≠fero') // TypeError: Class constructor Animal3 cannot be invoked without 'new'

// ‚úÖ Por isso, `class` √© mais segura e clara nesse aspecto.

console.log('=============================')