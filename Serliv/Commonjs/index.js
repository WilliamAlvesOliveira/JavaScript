// Importa o m√≥dulo nativo 'fs' (filesystem) do Node.js
const fs = require("fs");

/*
üîç Detalhe:
Quando usamos `require("fs")`, o Node entende que estamos pedindo um m√≥dulo **nativo**.
Esses m√≥dulos fazem parte do pr√≥prio Node.js ‚Äî n√£o precisam ser instalados com npm.
*/

// Importa o m√≥dulo externo 'node-emoji', instalado via npm
const emoji = require('node-emoji');

/*
üîç Detalhe:
Quando usamos `require("nome-do-pacote")`, o Node procura esse pacote na pasta `node_modules`.
Se n√£o encontrar ali, ele sobe na hierarquia de pastas procurando at√© achar ou lan√ßar erro.
*/

// Importa um m√≥dulo criado localmente (um arquivo seu)
const teste = require("./modulos/mod1.js");
console.log(teste);

// Usa o m√≥dulo 'fs' para criar ou sobrescrever um arquivo com o conte√∫do especificado
fs.writeFile("teste.txt", "Ol√°, Mundo!", erro => {
    if (erro) throw erro;
    console.log("Arquivo salvo com sucesso! ", emoji.get("coffee"));
});

// Importa mais dois m√≥dulos locais
const mod2 = require('./modulos/mod2');
const mod3 = require('./modulos/mod3');

// Ambos os objetos exportados por mod2 e mod3 t√™m a propriedade "teste",
// mas n√£o h√° conflito porque pertencem a m√≥dulos diferentes.
console.log(mod2);
console.log(mod3);

//=============================================================================
// ‚úÖ Informa√ß√µes sobre o arquivo atual e seu diret√≥rio

// __dirname retorna o caminho absoluto da pasta onde este arquivo est√° localizado
console.log("Diret√≥rio atual (__dirname):", __dirname);

// __filename retorna o caminho absoluto completo deste arquivo (incluindo o nome do arquivo)
console.log("Caminho completo do arquivo (__filename):", __filename);

/*
üß† Por que isso √© √∫til?

- Em aplica√ß√µes reais, geralmente precisamos manipular arquivos, imagens, dados, etc.
- Usar caminhos absolutos com `__dirname` evita erros causados por caminhos relativos mal resolvidos.
- Especialmente √∫til ao trabalhar com os m√≥dulos `fs` e `path`.

Exemplo:
    const caminho = path.join(__dirname, 'dados.txt');
    fs.readFile(caminho, ...)

Com isso, o c√≥digo sempre sabe "onde ele est√°", independentemente de onde o script for chamado.
*/
//=====================================================================================

//RESUMO FINAL==========
/*üì¶ Os m√≥dulos (CommonJS no caso do Node.js) vieram para:

1. üß© Modularizar o c√≥digo:
   - Voc√™ pode dividir seu projeto em pequenos arquivos reutiliz√°veis.
   - Cada arquivo pode exportar o que for necess√°rio (fun√ß√µes, objetos, strings, etc.).

2. üîí Isolar o escopo:
   - Antes dos m√≥dulos, usava-se IIFE (fun√ß√µes auto-execut√°veis) para proteger vari√°veis do escopo global.
   - Isso era arriscado: vari√°veis com o mesmo nome podiam causar conflitos.
   - Com m√≥dulos, cada arquivo tem seu **pr√≥prio escopo** ‚Äî ou seja, vari√°veis e fun√ß√µes ficam protegidas.

3. üìö Organiza√ß√£o:
   - Fica mais f√°cil manter e entender projetos grandes.
   - Podemos importar apenas o que for necess√°rio com `require()` (CommonJS) ou `import` (ESModules).

4. ü§ù Reutiliza√ß√£o:
   - Voc√™ pode reaproveitar m√≥dulos entre arquivos ou at√© entre projetos diferentes.

üîÅ Em resumo:
M√≥dulos tornam o c√≥digo **mais seguro, organizado, reutiliz√°vel** e f√°cil de manter.
Eles s√£o uma **melhoria enorme** em rela√ß√£o √† programa√ß√£o em um √∫nico arquivo global.
*/