// ‚úÖ Importa√ß√£o usando ESModules (padr√£o moderno do JavaScript)

import { teste } from './modulos/mod_esm.mjs';
import { teste as teste2 } from './modulos/mod_esm2.mjs';

/*
üì¶ Aqui estamos usando a sintaxe moderna `import`, dispon√≠vel nos ESModules.
Isso s√≥ funciona se:

1. O arquivo tiver extens√£o `.mjs`, ou
2. O seu `package.json` tiver `"type": "module"`

Esse tipo de m√≥dulo √© recomendado para novos projetos, pois √© o padr√£o oficial do JavaScript moderno.
*/

// Imprime no console o valor exportado da vari√°vel 'teste'
console.log(teste);
console.log(teste2);

// üö´ IMPORTANTE:
// Em arquivos ESModules, as vari√°veis `__dirname` e `__filename` N√ÉO est√£o dispon√≠veis por padr√£o.
// Isso acontece porque ESModules seguem o padr√£o dos navegadores (onde essas vari√°veis n√£o existem).
// Se voc√™ tentar usar `__dirname` ou `__filename` aqui, receber√° um erro: "is not defined".


//==== Como recriar __dirname e __filename em ESModules===============

// ‚úÖ Solu√ß√£o para recriar __dirname e __filename em arquivos ESModule
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// Converte a URL do m√≥dulo atual para caminho de arquivo
const __filename = fileURLToPath(import.meta.url);

// Extrai o diret√≥rio do caminho
const __dirname = dirname(__filename);

// Agora voc√™ pode usar como se estivesse no CommonJS
console.log("Caminho completo do arquivo (__filename):", __filename);
console.log("Diret√≥rio atual (__dirname):", __dirname);
