//======================================
//     BAIXANDO P√ÅGINA VIA HTTPS
//======================================
// Objetivo: Fazer uma requisi√ß√£o HTTPS para um servidor remoto e
// salvar o conte√∫do da resposta em um arquivo local usando streams.

// Importa o m√≥dulo nativo 'fs' para manipula√ß√£o de arquivos
const fs = require('fs')

// Importa o m√≥dulo 'https' para fazer requisi√ß√µes seguras (HTTPS)
const https = require('https')

// Importa a fun√ß√£o hostname do m√≥dulo 'os' (aqui n√£o est√° sendo usada)
const { hostname } = require('os')

// Configura√ß√µes da requisi√ß√£o HTTPS
const options = {
    hostname: 'serfrontend.com', // Endere√ßo do servidor
    port: '443',                 // Porta padr√£o HTTPS
    path: '/cursos/index.html', // Caminho do recurso desejado
    method: 'GET'               // M√©todo HTTP usado
}

// Cria um Write Stream para salvar a resposta no arquivo 'index.html'
const writeStream = fs.createWriteStream('./index.html', 'UTF-8')

// Faz a requisi√ß√£o HTTPS
const request = https.request(options, (resposta) => {
    // Define a codifica√ß√£o da resposta como texto
    resposta.setEncoding('UTF-8')

    // Opcional: acumular a resposta completa em uma string (n√£o usado no final)
    let response = ''

    // üîÅ Forma manual (comentada): capturar dados em partes
    /*
    resposta.on('data', data => {
        console.log(data.length)   // Exibe o tamanho de cada chunk
        response += data           // Acumula os dados
        writeStream.write(data)    // Escreve manualmente no arquivo
    })
    */

    // üîö Detecta o fim da resposta HTTP (mesmo que os dados tenham sido processados antes)
    request.on('end', () => {
        // Alternativa de escrita com writeFile (comentada)
        /*
        fs.writeFile('./index.html', response, err => {
            if (err) throw err
            console.log('index.html baixado')
        })
        */
        console.log('index.html lido') // Apenas indica que a leitura acabou
    })

    // üìù Quando o Write Stream terminar de escrever tudo
    writeStream.on('finish', () => {
        console.log('index.html baixado') // Mensagem de sucesso
    })

    // ‚úÖ Forma autom√°tica: usar .pipe() para conectar leitura e escrita
    resposta.pipe(writeStream).on('finish', () => {
        console.log('finish do pipe') // Mensagem quando o pipe terminar
    })
})

// Envia a requisi√ß√£o (obrigat√≥rio com request)
request.end()

