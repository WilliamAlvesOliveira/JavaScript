//===========================================================
// üì¶ Importa√ß√£o de m√≥dulo com CommonJS (require)
//===========================================================

// Aqui usamos `require` para importar as fun√ß√µes `getCount` e `increment`
// do m√≥dulo `myCount.js`, que est√° no mesmo diret√≥rio.
// Em CommonJS, cada arquivo √© um m√≥dulo isolado (com escopo pr√≥prio).
// Isso significa que vari√°veis definidas em `myCount.js` n√£o vazam para c√°
// e s√≥ podem ser acessadas por meio da exporta√ß√£o expl√≠cita.

const { getCount, increment } = require('./myCount')

// Chamamos a fun√ß√£o `increment` tr√™s vezes
increment() // count = 1
increment() // count = 2
increment() // count = 3

// Recuperamos e exibimos o valor atual de `count`
// A fun√ß√£o `getCount` acessa a vari√°vel privada `count` dentro de myCount.js
console.log(getCount()) // Sa√≠da: 3


//===========================================================
// üí° Isolamento de escopo
//===========================================================

// A vari√°vel `count` √© interna ao m√≥dulo `myCount.js`.
// Ela n√£o est√° acess√≠vel diretamente aqui neste arquivo.
// Isso garante **encapsulamento** e evita **efeitos colaterais** indesejados.
// A √∫nica forma de modificar ou acessar `count` √© usando as fun√ß√µes p√∫blicas (`increment`, `getCount`).


//===========================================================
// üì¶ Vers√£o com ESModules (import/export)
//===========================================================

// Para usar ESModules, voc√™ pode renomear o arquivo para `.mjs`
// ou definir `"type": "module"` no `package.json`.

// Arquivo: myCount.mjs
/*
let count = 0

export const increment = () => ++count
export const getCount = () => count
*/

// Arquivo: main.mjs
/*
import { getCount, increment } from './myCount.mjs'

increment()
increment()
increment()

console.log(getCount()) // Sa√≠da: 3
*/
