/*============================
    constructor function
=============================*/

// fun√ß√µes construtoras servem para criar objetos assim como as factory functions, por√©m devemos cria-las sempre utilizando o operador Neu e deve ter a primeira letra mai√∫scula.
//obs atualmenente, as fun√ß√µes construtoras foram substituidas pelas classes

function Cachorro(nome){
    let position = 0
    this.name = nome

    this.latir = function(){
        console.log(this.name, 'est√° latindo')
    }// em fun√ß√µes construtoras n√£o √© necess√°rio separar os m√©todos com ,

    this.andar = function(quantPassos){
        position += quantPassos
        console.log(this.name, `andou ${quantPassos} passos`)
        console.log('a posi√ß√£o atual √©', position)
    }
}

const rex = new Cachorro( 'Rex') //a palavra new cria um 'Objeto vazio que receber√° os m√©todos e propriedades
const toto = new Cachorro('Tot√≥')

console.log(rex)
rex.latir()
rex.andar(5)
rex.andar(10)

toto.andar(3)

console.log('----------------------')

/* 
Resumo:
Fun√ß√µes construtoras s√£o uma forma tradicional de criar m√∫ltiplos objetos com uma estrutura comum. Elas funcionam junto com o operador `new`, que cria um novo objeto e vincula `this` √† fun√ß√£o chamada. √â uma alternativa √†s Factory Functions, com uma sintaxe mais pr√≥xima do paradigma OO cl√°ssico.

Obs: Embora atualmente se use mais `class`, entender fun√ß√£o construtora √© essencial para compreender a fundo como objetos e prot√≥tipos funcionam no JavaScript.

Diferente das factory functions, aqui os m√©todos s√£o definidos diretamente no objeto com `this`, o que pode ter impacto em performance (caso cada inst√¢ncia crie c√≥pias dos m√©todos). Com classes e prototypes, conseguimos otimizar isso.

*/

/*============
    CLASS
=============*/
//class √© um a√ßucar sintatico introduzido no ES6 para se aproximar dos classes de outras lunguagens como Java, python ou C#, √© uma forma moderna, recomendada e √© mais usada atualmente. Ela encapsula melhor o construtor e os m√©todos e evita confus√µes com o prototype explicito (ele ainda existe mais fica 'escondido')

class Cachorro2{
    #position = 0  // o # significa que √© uma propriedade privada (usando a sintaxe ES2022+)

    constructor(name){ //aqui √© a inst√¢ncia(objeto) que ser√° criada
        this.name = name
    }

    //os m√©todos na classe pertencem ao prototype da classe, n√£o a inst√¢ncia(objeto) √© como se a inst√¢ncia carregace ponteiros(ou link) para os m√©todos que est√£o no prototype da classe, evitando assim c√≥pias dos mesmos m√©todos.
    latir(){
        console.log(this.name, 'est√° latindo')
    }

    andar(quantPassos){
        this.#position += quantPassos //note que aqui position √© uma propriedade
        console.log(this.name, `andou ${quantPassos} passos`)
        console.log('a posi√ß√£o atual √©', this.#position)//position escrito como propriedade
    }

    get position(){ //o m√©todo get pode ser usado normalmente
        return this.#position
    }
}

const mailow = new Cachorro2('Mailow')
const brutus = new Cachorro2('Brutus')

console.log(mailow) //aqui o objeto refere-se apenas ao cachorro mailow, os m√©todos pertencem a classe cachorro, portanto a sa√≠da no console ser√° apenas {Name: 'Mailow'}
//Os m√©todos poderam ser usados normalmente
mailow.latir()
mailow.andar(5)
mailow.andar(10)

brutus.andar(3)
console.log(brutus.position)

/* 
=====================
Resumo Final
=====================

‚û°Ô∏è As **fun√ß√µes construtoras** s√£o uma forma tradicional em JavaScript de criar objetos reutiliz√°veis com `new`. Usam `this` para atribuir propriedades e m√©todos diretamente √† inst√¢ncia. Por√©m, isso pode impactar a performance, pois cada inst√¢ncia carrega suas pr√≥prias c√≥pias dos m√©todos.

‚û°Ô∏è As **classes (class)**, introduzidas no ES6, s√£o uma sintaxe moderna e recomendada. Elas encapsulam melhor o construtor, organizam os m√©todos no `prototype` automaticamente (melhorando performance), e permitem uso de recursos como **propriedades privadas** (`#`) e **getters/setters** de forma mais clara.

üß† **Boas pr√°ticas:**
- Prefira `class` para projetos atuais.
- Use `get`/`set` apenas quando necess√°rio (evite uso abusivo, como ensina o Calisthenics).
- Evite definir m√©todos dentro de `constructor` com `this.metodo = function()` (isso cria m√∫ltiplas c√≥pias).

Entender `function constructor`, `factory function` e `class` √© fundamental para dominar a cria√ß√£o de objetos e se aprofundar em **Programa√ß√£o Orientada a Objetos (OOP)** em JavaScript.

*/

