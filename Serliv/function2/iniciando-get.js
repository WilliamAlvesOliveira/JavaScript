/*=======================
    iniciando get
========================*/
// usando a palavra get antes do m√©todo ele torna-se um m√©todo GETTER, assim voc√™ pode chamalo como se fosse uma propriedade

function createDog(name){
    let position = 0 //variavel que ser√° acessada via closure
    return {
        name, //shorthand pois name : name
        latir(){
            console.log(this.name, 'est√° latindo')
        },
        andar(quantPassos){
            position += quantPassos
            console.log(this.name, `andou ${quantPassos} passos`)
        },
        comer(comida){
            console.log(this.name, `est√° comendo ${comida}`)
        },

        //note aqui que posi√ß√£o ainda √© um m√©todo, mais poder√° ser achamdado como uma propriedade ex: dog.position
        get position(){ 
            return position
        }
    }
}

const rex = createDog('Rex')
console.log(rex)// note que position √© [GETTER]
rex.andar(10)
console.log(rex.position) //n√£o precisamos utilizar ()

/*==========================================
    RESUMO SOBRE GETTERS E INTRODU√á√ÉO AO SETTER
===========================================*/

/*
Nesta aula vimos como criar m√©todos especiais chamados **getters**, usando a palavra-chave `get` antes da fun√ß√£o. 

O getter permite que um m√©todo seja acessado como se fosse uma **propriedade**, sem a necessidade de usar par√™nteses.
Isso traz mais clareza e eleg√¢ncia na hora de acessar dados internos de um objeto, especialmente quando esses dados est√£o encapsulados por meio de closures (como a vari√°vel `position` no exemplo).

Exemplo:
    const rex = createDog('Rex')
    rex.andar(10)
    console.log(rex.position) // acessa como se fosse uma propriedade

‚û°Ô∏è Vantagens:
- Mant√©m os dados internos privados (encapsulados)
- Exp√µe apenas o que for necess√°rio ao usu√°rio do objeto
- Interface mais limpa e intuitiva

---

üß† **SETTER ‚Äî conceito complementar ao GETTER**

O `set` funciona de forma parecida, mas √© utilizado para atribuir valores. Ele tamb√©m se comporta como uma propriedade, por√©m permite que voc√™ **modifique** um valor interno do objeto.

Exemplo com `set`:

function createDog(name) {
    let position = 0

    return {
        name,
        andar(quantPassos) {
            position += quantPassos
        },
        get position() {
            return position
        },
        set position(value) {
            if (typeof value !== 'number') throw TypeError('Valor inv√°lido')
            position = value
        }
    }
}

const dog = createDog('Rex')
dog.position = 50     // usando o setter
console.log(dog.position) // 50

‚ö†Ô∏è Cuidado: setters podem abrir espa√ßo para alterar valores que voc√™ talvez queira manter protegidos. S√≥ use quando realmente quiser permitir essa altera√ß√£o externa.

---

üéØ **Resumo geral:**
- `get` = permite **ler** um valor como se fosse propriedade
- `set` = permite **atribuir** um valor como se fosse propriedade
- Ambos ajudam a criar objetos com **interfaces mais naturais**, sem perder o controle interno dos dados (encapsulamento)

Esses conceitos fazem parte da base de **Programa√ß√£o Orientada a Objetos (OOP)**, mesmo quando aplicados em fun√ß√£o f√°brica.
*/
