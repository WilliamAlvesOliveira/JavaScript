/*======================
    Factories Functions
=======================*/

//imaginemos que temos 3 objetos para cachorros
const rex = {
    name:'Rex',
    latir(){},
    andar(){},
    comer(){}
}
const mailow = {
    name: 'Mailow',
    latir(){},
    andar(){},
    comer(){}
}
const toto = {
    name: 'Tot√≥',
    latir(){},
    andar(){},
    comer(){}
}

//neste caso caso fossemos escrever as fun√ß√µes para o objeto teriamos que escreve-las em todos eles, e se necessit√°ssemos de altera√ß√µes teriamos que alterar uma por uma, para isso deveriamos criar uma fun√ß√£o para a cria√ß√£o de cada cachorro
function createDog(name){
    return {
        name, //shorthand pois name : name
        latir(){
            console.log(this.name, 'est√° latindo')
        },
        andar(quantPassos){
            console.log(this.name, `andou ${quantPassos} passos`)
        },
        comer(comida){
            console.log(this.name, `est√° comendo ${comida}`)
        }
    }
}


const rex2 = createDog('Rex')//rex2 vai ser o objeto retornado por createDog tendo Rex como name
console.log(rex2)//obj rex2
console.log('---------')

//para resolvermos isso criaremos uma fun√ß√£o fabrica(factory function) para que ela seja respons√°vel por criar o objeto, assim caso quizermos alterar alguma l√≥gica, ou adicionar/remover m√©todos, basta alterar-mos na fun√ß√£o

//vamos criar uma vari√°vel para mostrar a posi√ß√£o do cachorro 

function createDog2(name){
    let position = 0 //variavel que ser√° acessada via closure
    return {
        name, //shorthand pois name : name
        latir(){
            console.log(this.name, 'est√° latindo')
        },
        andar(quantPassos){
            position += quantPassos
            console.log(this.name, `andou ${quantPassos} passos`)
        },
        comer(comida){
            console.log(this.name, `est√° comendo ${comida}`)
        },
        showPosition(){
            return position
        }
    }
}

const rex3 = createDog2("Rex")
rex3.andar(10)//rex andou 10 passos
rex3.andar(5)//rex andou mais 5 passos
console.log(rex3.showPosition())// mostra que rex andou 15 passos
console.log('----------')

const toto2 = createDog2('Tot√≥')
toto2.andar(20)
toto2.andar(-3)
console.log(toto2.showPosition())

/* =========================================================================
  üß† ANOTA√á√ïES E EXPLICA√á√ïES SOBRE FACTORY FUNCTIONS

  ‚úÖ O que √© uma Factory Function?
  - √â uma fun√ß√£o que retorna um objeto novo.
  - Alternativa √† fun√ß√£o construtora (que usa 'new').
  - Permite encapsular l√≥gica e estado interno usando closures.

  ‚úÖ Diferen√ßa entre Factory Function e Fun√ß√£o Construtora:
  - Factory Function: 
      - √â uma fun√ß√£o comum (ex: function createDog()).
      - Retorna um objeto manualmente.
      - N√£o precisa usar 'new'.
      - Pode usar vari√°veis privadas via closure (ex: let position).
  - Fun√ß√£o Construtora:
      - Come√ßa com letra mai√∫scula (ex: function Dog()).
      - Usa 'this' para definir propriedades.
      - Usa o operador 'new' para instanciar.
      - N√£o oferece encapsulamento por padr√£o.

  ‚úÖ Exemplo de uso da Factory Function:
  const rex = createDog('Rex')
  rex.andar(5)

  ‚úÖ Encapsulamento com closure:
  - No exemplo com createDog2(), a vari√°vel 'position' s√≥ pode ser acessada/modificada pelos m√©todos definidos no retorno.
  - Isso protege o estado interno do objeto contra acessos diretos.

  ‚úÖ Performance:
  - Em projetos grandes, criar m√©todos dentro da factory function pode afetar a performance,
    pois cada inst√¢ncia recebe sua pr√≥pria c√≥pia dos m√©todos.
  - Para mitigar isso, pode-se mover os m√©todos para fora da fun√ß√£o e referenci√°-los,
    ou usar prot√≥tipos (mais comum com fun√ß√µes construtoras ou classes).

  ‚úÖ Quando usar?
  - Factory Functions s√£o muito √∫teis quando:
      - Voc√™ precisa de encapsulamento via closure.
      - Voc√™ quer evitar o uso de 'new'.
      - Voc√™ deseja uma sintaxe mais simples e clara para fun√ß√µes pequenas/modulares.

  ‚úÖ Curiosidade:
  - Em bibliotecas modernas (como React), factory functions s√£o muito utilizadas
    para criar componentes ou hooks personalizados.

========================================================================== */

